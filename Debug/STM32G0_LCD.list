
STM32G0_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001f78  08001f78  00002f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002008  08002008  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002008  08002008  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002008  08002008  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002008  08002008  00003008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800200c  0800200c  0000300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002010  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800201c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800201c  0000402c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eca  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001323  00000000  00000000  00007efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00009228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000378  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001316c  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006a85  00000000  00000000  0001cbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000760ca  00000000  00000000  00023671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009973b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f10  00000000  00000000  00099780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0009a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001f60 	.word	0x08001f60

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001f60 	.word	0x08001f60

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f97c 	bl	8000518 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f85c 	bl	80002dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8b4 	bl	8000390 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


	LCD16X2_Init(MyLCD);
 8000228:	2000      	movs	r0, #0
 800022a:	f001 fb6f 	bl	800190c <LCD16X2_Init>
	LCD16X2_Clear(MyLCD);
 800022e:	2000      	movs	r0, #0
 8000230:	f001 fac0 	bl	80017b4 <LCD16X2_Clear>
	LCD16X2_Set_Cursor(MyLCD, 1, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	2101      	movs	r1, #1
 8000238:	2000      	movs	r0, #0
 800023a:	f001 fb05 	bl	8001848 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(MyLCD, "  DeepBlue");
 800023e:	4b24      	ldr	r3, [pc, #144]	@ (80002d0 <main+0xb8>)
 8000240:	0019      	movs	r1, r3
 8000242:	2000      	movs	r0, #0
 8000244:	f001 fe12 	bl	8001e6c <LCD16X2_Write_String>
	LCD16X2_Set_Cursor(MyLCD, 2, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	2102      	movs	r1, #2
 800024c:	2000      	movs	r0, #0
 800024e:	f001 fafb 	bl	8001848 <LCD16X2_Set_Cursor>
	LCD16X2_Write_String(MyLCD, "STM32 Course");
 8000252:	4b20      	ldr	r3, [pc, #128]	@ (80002d4 <main+0xbc>)
 8000254:	0019      	movs	r1, r3
 8000256:	2000      	movs	r0, #0
 8000258:	f001 fe08 	bl	8001e6c <LCD16X2_Write_String>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LCD16X2_SR(MyLCD);  HAL_Delay(1500);
 800025c:	2000      	movs	r0, #0
 800025e:	f001 fe3d 	bl	8001edc <LCD16X2_SR>
 8000262:	4b1d      	ldr	r3, [pc, #116]	@ (80002d8 <main+0xc0>)
 8000264:	0018      	movs	r0, r3
 8000266:	f000 f9dd 	bl	8000624 <HAL_Delay>
	  LCD16X2_SR(MyLCD);  HAL_Delay(1500);
 800026a:	2000      	movs	r0, #0
 800026c:	f001 fe36 	bl	8001edc <LCD16X2_SR>
 8000270:	4b19      	ldr	r3, [pc, #100]	@ (80002d8 <main+0xc0>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f9d6 	bl	8000624 <HAL_Delay>
	  LCD16X2_SR(MyLCD);  HAL_Delay(1500);
 8000278:	2000      	movs	r0, #0
 800027a:	f001 fe2f 	bl	8001edc <LCD16X2_SR>
 800027e:	4b16      	ldr	r3, [pc, #88]	@ (80002d8 <main+0xc0>)
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f9cf 	bl	8000624 <HAL_Delay>
	  LCD16X2_SR(MyLCD);  HAL_Delay(1500);
 8000286:	2000      	movs	r0, #0
 8000288:	f001 fe28 	bl	8001edc <LCD16X2_SR>
 800028c:	4b12      	ldr	r3, [pc, #72]	@ (80002d8 <main+0xc0>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 f9c8 	bl	8000624 <HAL_Delay>

	  LCD16X2_SL(MyLCD);  HAL_Delay(1500);
 8000294:	2000      	movs	r0, #0
 8000296:	f001 fe0b 	bl	8001eb0 <LCD16X2_SL>
 800029a:	4b0f      	ldr	r3, [pc, #60]	@ (80002d8 <main+0xc0>)
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f9c1 	bl	8000624 <HAL_Delay>
	  LCD16X2_SL(MyLCD);  HAL_Delay(1500);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f001 fe04 	bl	8001eb0 <LCD16X2_SL>
 80002a8:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <main+0xc0>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 f9ba 	bl	8000624 <HAL_Delay>
	  LCD16X2_SL(MyLCD);  HAL_Delay(1500);
 80002b0:	2000      	movs	r0, #0
 80002b2:	f001 fdfd 	bl	8001eb0 <LCD16X2_SL>
 80002b6:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <main+0xc0>)
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f9b3 	bl	8000624 <HAL_Delay>
	  LCD16X2_SL(MyLCD);  HAL_Delay(1500);
 80002be:	2000      	movs	r0, #0
 80002c0:	f001 fdf6 	bl	8001eb0 <LCD16X2_SL>
 80002c4:	4b04      	ldr	r3, [pc, #16]	@ (80002d8 <main+0xc0>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 f9ac 	bl	8000624 <HAL_Delay>
	  LCD16X2_SR(MyLCD);  HAL_Delay(1500);
 80002cc:	46c0      	nop			@ (mov r8, r8)
 80002ce:	e7c5      	b.n	800025c <main+0x44>
 80002d0:	08001f78 	.word	0x08001f78
 80002d4:	08001f84 	.word	0x08001f84
 80002d8:	000005dc 	.word	0x000005dc

080002dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b093      	sub	sp, #76	@ 0x4c
 80002e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e2:	2414      	movs	r4, #20
 80002e4:	193b      	adds	r3, r7, r4
 80002e6:	0018      	movs	r0, r3
 80002e8:	2334      	movs	r3, #52	@ 0x34
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f001 fe0b 	bl	8001f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	0018      	movs	r0, r3
 80002f6:	2310      	movs	r3, #16
 80002f8:	001a      	movs	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	f001 fe04 	bl	8001f08 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	0018      	movs	r0, r3
 8000306:	f000 fbe7 	bl	8000ad8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2202      	movs	r2, #2
 800030e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2280      	movs	r2, #128	@ 0x80
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000318:	0021      	movs	r1, r4
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2240      	movs	r2, #64	@ 0x40
 8000324:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2202      	movs	r2, #2
 8000330:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2208      	movs	r2, #8
 800033c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2280      	movs	r2, #128	@ 0x80
 8000342:	0292      	lsls	r2, r2, #10
 8000344:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	0592      	lsls	r2, r2, #22
 800034c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	187b      	adds	r3, r7, r1
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fc01 	bl	8000b58 <HAL_RCC_OscConfig>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800035a:	f000 f86b 	bl	8000434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2207      	movs	r2, #7
 8000362:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2202      	movs	r2, #2
 8000368:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2102      	movs	r1, #2
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fefc 	bl	8001178 <HAL_RCC_ClockConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000384:	f000 f856 	bl	8000434 <Error_Handler>
  }
}
 8000388:	46c0      	nop			@ (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b013      	add	sp, #76	@ 0x4c
 800038e:	bd90      	pop	{r4, r7, pc}

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b089      	sub	sp, #36	@ 0x24
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	240c      	movs	r4, #12
 8000398:	193b      	adds	r3, r7, r4
 800039a:	0018      	movs	r0, r3
 800039c:	2314      	movs	r3, #20
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f001 fdb1 	bl	8001f08 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003ac:	2120      	movs	r1, #32
 80003ae:	430a      	orrs	r2, r1
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003b6:	2220      	movs	r2, #32
 80003b8:	4013      	ands	r3, r2
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b1a      	ldr	r3, [pc, #104]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003c2:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003c4:	2102      	movs	r1, #2
 80003c6:	430a      	orrs	r2, r1
 80003c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003ce:	2202      	movs	r2, #2
 80003d0:	4013      	ands	r3, r2
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b14      	ldr	r3, [pc, #80]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003da:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003dc:	2101      	movs	r1, #1
 80003de:	430a      	orrs	r2, r1
 80003e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003e2:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_GPIO_Init+0x98>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003e6:	2201      	movs	r2, #1
 80003e8:	4013      	ands	r3, r2
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80003ee:	490f      	ldr	r1, [pc, #60]	@ (800042c <MX_GPIO_Init+0x9c>)
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_GPIO_Init+0xa0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 fb51 	bl	8000a9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80003fa:	0021      	movs	r1, r4
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <MX_GPIO_Init+0x9c>)
 8000400:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2201      	movs	r2, #1
 8000406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2200      	movs	r2, #0
 8000412:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	187b      	adds	r3, r7, r1
 8000416:	4a06      	ldr	r2, [pc, #24]	@ (8000430 <MX_GPIO_Init+0xa0>)
 8000418:	0019      	movs	r1, r3
 800041a:	0010      	movs	r0, r2
 800041c:	f000 f9da 	bl	80007d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000420:	46c0      	nop			@ (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b009      	add	sp, #36	@ 0x24
 8000426:	bd90      	pop	{r4, r7, pc}
 8000428:	40021000 	.word	0x40021000
 800042c:	00007c04 	.word	0x00007c04
 8000430:	50000400 	.word	0x50000400

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000438:	b672      	cpsid	i
}
 800043a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	e7fd      	b.n	800043c <Error_Handler+0x8>

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	@ (8000484 <HAL_MspInit+0x44>)
 8000448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <HAL_MspInit+0x44>)
 800044c:	2101      	movs	r1, #1
 800044e:	430a      	orrs	r2, r1
 8000450:	641a      	str	r2, [r3, #64]	@ 0x40
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <HAL_MspInit+0x44>)
 8000454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000456:	2201      	movs	r2, #1
 8000458:	4013      	ands	r3, r2
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_MspInit+0x44>)
 8000460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <HAL_MspInit+0x44>)
 8000464:	2180      	movs	r1, #128	@ 0x80
 8000466:	0549      	lsls	r1, r1, #21
 8000468:	430a      	orrs	r2, r1
 800046a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <HAL_MspInit+0x44>)
 800046e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000470:	2380      	movs	r3, #128	@ 0x80
 8000472:	055b      	lsls	r3, r3, #21
 8000474:	4013      	ands	r3, r2
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	40021000 	.word	0x40021000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800048c:	46c0      	nop			@ (mov r8, r8)
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000494:	46c0      	nop			@ (mov r8, r8)
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}

080004ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b0:	f000 f89c 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	@ (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	f7ff fff7 	bl	80004ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	@ (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	@ (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f001 fd11 	bl	8001f18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004f6:	f7ff fe8f 	bl	8000218 <main>

080004fa <LoopForever>:

LoopForever:
  b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000508:	08002010 	.word	0x08002010
  ldr r2, =_sbss
 800050c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000510:	2000002c 	.word	0x2000002c

08000514 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC1_IRQHandler>
	...

08000518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <HAL_Init+0x3c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <HAL_Init+0x3c>)
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0049      	lsls	r1, r1, #1
 800052e:	430a      	orrs	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f810 	bl	8000558 <HAL_InitTick>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d003      	beq.n	8000544 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
 8000542:	e001      	b.n	8000548 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000544:	f7ff ff7c 	bl	8000440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	781b      	ldrb	r3, [r3, #0]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b002      	add	sp, #8
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40022000 	.word	0x40022000

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000560:	230f      	movs	r3, #15
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000568:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <HAL_InitTick+0x88>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d02b      	beq.n	80005c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000570:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <HAL_InitTick+0x8c>)
 8000572:	681c      	ldr	r4, [r3, #0]
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <HAL_InitTick+0x88>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	0019      	movs	r1, r3
 800057a:	23fa      	movs	r3, #250	@ 0xfa
 800057c:	0098      	lsls	r0, r3, #2
 800057e:	f7ff fdbf 	bl	8000100 <__udivsi3>
 8000582:	0003      	movs	r3, r0
 8000584:	0019      	movs	r1, r3
 8000586:	0020      	movs	r0, r4
 8000588:	f7ff fdba 	bl	8000100 <__udivsi3>
 800058c:	0003      	movs	r3, r0
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f913 	bl	80007ba <HAL_SYSTICK_Config>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d112      	bne.n	80005be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d80a      	bhi.n	80005b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	2301      	movs	r3, #1
 80005a2:	425b      	negs	r3, r3
 80005a4:	2200      	movs	r2, #0
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 f8f2 	bl	8000790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <HAL_InitTick+0x90>)
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	e00d      	b.n	80005d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80005b4:	230f      	movs	r3, #15
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	e008      	b.n	80005d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005be:	230f      	movs	r3, #15
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e003      	b.n	80005d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005c8:	230f      	movs	r3, #15
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80005d0:	230f      	movs	r3, #15
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	781b      	ldrb	r3, [r3, #0]
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b005      	add	sp, #20
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_IncTick+0x1c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	001a      	movs	r2, r3
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <HAL_IncTick+0x20>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	18d2      	adds	r2, r2, r3
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <HAL_IncTick+0x20>)
 80005fe:	601a      	str	r2, [r3, #0]
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	20000008 	.word	0x20000008
 800060c:	20000028 	.word	0x20000028

08000610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  return uwTick;
 8000614:	4b02      	ldr	r3, [pc, #8]	@ (8000620 <HAL_GetTick+0x10>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	0018      	movs	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	20000028 	.word	0x20000028

08000624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800062c:	f7ff fff0 	bl	8000610 <HAL_GetTick>
 8000630:	0003      	movs	r3, r0
 8000632:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	3301      	adds	r3, #1
 800063c:	d005      	beq.n	800064a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_Delay+0x44>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	001a      	movs	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	189b      	adds	r3, r3, r2
 8000648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	f7ff ffe0 	bl	8000610 <HAL_GetTick>
 8000650:	0002      	movs	r2, r0
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8f7      	bhi.n	800064c <HAL_Delay+0x28>
  {
  }
}
 800065c:	46c0      	nop			@ (mov r8, r8)
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b004      	add	sp, #16
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000008 	.word	0x20000008

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	0002      	movs	r2, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000680:	d828      	bhi.n	80006d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000682:	4a2f      	ldr	r2, [pc, #188]	@ (8000740 <__NVIC_SetPriority+0xd4>)
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	33c0      	adds	r3, #192	@ 0xc0
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	589b      	ldr	r3, [r3, r2]
 8000692:	1dfa      	adds	r2, r7, #7
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	0011      	movs	r1, r2
 8000698:	2203      	movs	r2, #3
 800069a:	400a      	ands	r2, r1
 800069c:	00d2      	lsls	r2, r2, #3
 800069e:	21ff      	movs	r1, #255	@ 0xff
 80006a0:	4091      	lsls	r1, r2
 80006a2:	000a      	movs	r2, r1
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	401a      	ands	r2, r3
 80006a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	019b      	lsls	r3, r3, #6
 80006ae:	22ff      	movs	r2, #255	@ 0xff
 80006b0:	401a      	ands	r2, r3
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	0018      	movs	r0, r3
 80006b8:	2303      	movs	r3, #3
 80006ba:	4003      	ands	r3, r0
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c0:	481f      	ldr	r0, [pc, #124]	@ (8000740 <__NVIC_SetPriority+0xd4>)
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	33c0      	adds	r3, #192	@ 0xc0
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006d2:	e031      	b.n	8000738 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <__NVIC_SetPriority+0xd8>)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0019      	movs	r1, r3
 80006dc:	230f      	movs	r3, #15
 80006de:	400b      	ands	r3, r1
 80006e0:	3b08      	subs	r3, #8
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	3306      	adds	r3, #6
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	18d3      	adds	r3, r2, r3
 80006ea:	3304      	adds	r3, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	1dfa      	adds	r2, r7, #7
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	0011      	movs	r1, r2
 80006f4:	2203      	movs	r2, #3
 80006f6:	400a      	ands	r2, r1
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	21ff      	movs	r1, #255	@ 0xff
 80006fc:	4091      	lsls	r1, r2
 80006fe:	000a      	movs	r2, r1
 8000700:	43d2      	mvns	r2, r2
 8000702:	401a      	ands	r2, r3
 8000704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	22ff      	movs	r2, #255	@ 0xff
 800070c:	401a      	ands	r2, r3
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	2303      	movs	r3, #3
 8000716:	4003      	ands	r3, r0
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <__NVIC_SetPriority+0xd8>)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	001c      	movs	r4, r3
 8000724:	230f      	movs	r3, #15
 8000726:	4023      	ands	r3, r4
 8000728:	3b08      	subs	r3, #8
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	430a      	orrs	r2, r1
 800072e:	3306      	adds	r3, #6
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	18c3      	adds	r3, r0, r3
 8000734:	3304      	adds	r3, #4
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b003      	add	sp, #12
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	045b      	lsls	r3, r3, #17
 8000758:	429a      	cmp	r2, r3
 800075a:	d301      	bcc.n	8000760 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075c:	2301      	movs	r3, #1
 800075e:	e010      	b.n	8000782 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <SysTick_Config+0x44>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	3a01      	subs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000768:	2301      	movs	r3, #1
 800076a:	425b      	negs	r3, r3
 800076c:	2103      	movs	r1, #3
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ff7c 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <SysTick_Config+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	@ (800078c <SysTick_Config+0x44>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	210f      	movs	r1, #15
 800079c:	187b      	adds	r3, r7, r1
 800079e:	1c02      	adds	r2, r0, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b004      	add	sp, #16
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ffbf 	bl	8000748 <SysTick_Config>
 80007ca:	0003      	movs	r3, r0
}
 80007cc:	0018      	movs	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e2:	e147      	b.n	8000a74 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d100      	bne.n	80007fc <HAL_GPIO_Init+0x28>
 80007fa:	e138      	b.n	8000a6e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2203      	movs	r2, #3
 8000802:	4013      	ands	r3, r2
 8000804:	2b01      	cmp	r3, #1
 8000806:	d005      	beq.n	8000814 <HAL_GPIO_Init+0x40>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2203      	movs	r2, #3
 800080e:	4013      	ands	r3, r2
 8000810:	2b02      	cmp	r3, #2
 8000812:	d130      	bne.n	8000876 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	2203      	movs	r2, #3
 8000820:	409a      	lsls	r2, r3
 8000822:	0013      	movs	r3, r2
 8000824:	43da      	mvns	r2, r3
 8000826:	693b      	ldr	r3, [r7, #16]
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	409a      	lsls	r2, r3
 8000836:	0013      	movs	r3, r2
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	4313      	orrs	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800084a:	2201      	movs	r2, #1
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	43da      	mvns	r2, r3
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	4013      	ands	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	091b      	lsrs	r3, r3, #4
 8000860:	2201      	movs	r2, #1
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
 8000868:	0013      	movs	r3, r2
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4313      	orrs	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2203      	movs	r2, #3
 800087c:	4013      	ands	r3, r2
 800087e:	2b03      	cmp	r3, #3
 8000880:	d017      	beq.n	80008b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	2203      	movs	r2, #3
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	43da      	mvns	r2, r3
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	689a      	ldr	r2, [r3, #8]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2203      	movs	r2, #3
 80008b8:	4013      	ands	r3, r2
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	58d3      	ldr	r3, [r2, r3]
 80008ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	2207      	movs	r2, #7
 80008d0:	4013      	ands	r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	409a      	lsls	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	43da      	mvns	r2, r3
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	4013      	ands	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	2107      	movs	r1, #7
 80008ea:	400b      	ands	r3, r1
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	6939      	ldr	r1, [r7, #16]
 8000904:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	43da      	mvns	r2, r3
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4013      	ands	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2203      	movs	r2, #3
 8000924:	401a      	ands	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	409a      	lsls	r2, r3
 800092c:	0013      	movs	r3, r2
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	23c0      	movs	r3, #192	@ 0xc0
 8000940:	029b      	lsls	r3, r3, #10
 8000942:	4013      	ands	r3, r2
 8000944:	d100      	bne.n	8000948 <HAL_GPIO_Init+0x174>
 8000946:	e092      	b.n	8000a6e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000948:	4a50      	ldr	r2, [pc, #320]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	089b      	lsrs	r3, r3, #2
 800094e:	3318      	adds	r3, #24
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	589b      	ldr	r3, [r3, r2]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	2203      	movs	r2, #3
 800095a:	4013      	ands	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	220f      	movs	r2, #15
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	23a0      	movs	r3, #160	@ 0xa0
 8000970:	05db      	lsls	r3, r3, #23
 8000972:	429a      	cmp	r2, r3
 8000974:	d013      	beq.n	800099e <HAL_GPIO_Init+0x1ca>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a45      	ldr	r2, [pc, #276]	@ (8000a90 <HAL_GPIO_Init+0x2bc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d00d      	beq.n	800099a <HAL_GPIO_Init+0x1c6>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a44      	ldr	r2, [pc, #272]	@ (8000a94 <HAL_GPIO_Init+0x2c0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d007      	beq.n	8000996 <HAL_GPIO_Init+0x1c2>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a43      	ldr	r2, [pc, #268]	@ (8000a98 <HAL_GPIO_Init+0x2c4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_GPIO_Init+0x1be>
 800098e:	2303      	movs	r3, #3
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x1cc>
 8000992:	2305      	movs	r3, #5
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x1cc>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x1cc>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x1cc>
 800099e:	2300      	movs	r3, #0
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	2103      	movs	r1, #3
 80009a4:	400a      	ands	r2, r1
 80009a6:	00d2      	lsls	r2, r2, #3
 80009a8:	4093      	lsls	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80009b0:	4936      	ldr	r1, [pc, #216]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3318      	adds	r3, #24
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009be:	4b33      	ldr	r3, [pc, #204]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	035b      	lsls	r3, r3, #13
 80009d6:	4013      	ands	r3, r2
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43da      	mvns	r2, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	2380      	movs	r3, #128	@ 0x80
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	4013      	ands	r3, r2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000a14:	2384      	movs	r3, #132	@ 0x84
 8000a16:	58d3      	ldr	r3, [r2, r3]
 8000a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	43da      	mvns	r2, r3
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	029b      	lsls	r3, r3, #10
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a38:	4914      	ldr	r1, [pc, #80]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000a3a:	2284      	movs	r2, #132	@ 0x84
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000a42:	2380      	movs	r3, #128	@ 0x80
 8000a44:	58d3      	ldr	r3, [r2, r3]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2380      	movs	r3, #128	@ 0x80
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a66:	4909      	ldr	r1, [pc, #36]	@ (8000a8c <HAL_GPIO_Init+0x2b8>)
 8000a68:	2280      	movs	r2, #128	@ 0x80
 8000a6a:	693b      	ldr	r3, [r7, #16]
 8000a6c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	3301      	adds	r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	40da      	lsrs	r2, r3
 8000a7c:	1e13      	subs	r3, r2, #0
 8000a7e:	d000      	beq.n	8000a82 <HAL_GPIO_Init+0x2ae>
 8000a80:	e6b0      	b.n	80007e4 <HAL_GPIO_Init+0x10>
  }
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b006      	add	sp, #24
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021800 	.word	0x40021800
 8000a90:	50000400 	.word	0x50000400
 8000a94:	50000800 	.word	0x50000800
 8000a98:	50000c00 	.word	0x50000c00

08000a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	0008      	movs	r0, r1
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	1c02      	adds	r2, r0, #0
 8000aac:	801a      	strh	r2, [r3, #0]
 8000aae:	1c7b      	adds	r3, r7, #1
 8000ab0:	1c0a      	adds	r2, r1, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ab4:	1c7b      	adds	r3, r7, #1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d004      	beq.n	8000ac6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000abc:	1cbb      	adds	r3, r7, #2
 8000abe:	881a      	ldrh	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ac4:	e003      	b.n	8000ace <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	881a      	ldrh	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	0019      	movs	r1, r3
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d11f      	bne.n	8000b3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	0013      	movs	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	189b      	adds	r3, r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4912      	ldr	r1, [pc, #72]	@ (8000b54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff faf8 	bl	8000100 <__udivsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	3301      	adds	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b16:	e008      	b.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e001      	b.n	8000b2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000b26:	2303      	movs	r3, #3
 8000b28:	e009      	b.n	8000b3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	401a      	ands	r2, r3
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d0ed      	beq.n	8000b18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40007000 	.word	0x40007000
 8000b4c:	fffff9ff 	.word	0xfffff9ff
 8000b50:	20000000 	.word	0x20000000
 8000b54:	000f4240 	.word	0x000f4240

08000b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d101      	bne.n	8000b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e2f3      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	d100      	bne.n	8000b76 <HAL_RCC_OscConfig+0x1e>
 8000b74:	e07c      	b.n	8000c70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b76:	4bc3      	ldr	r3, [pc, #780]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2238      	movs	r2, #56	@ 0x38
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b80:	4bc0      	ldr	r3, [pc, #768]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	2203      	movs	r2, #3
 8000b86:	4013      	ands	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2b10      	cmp	r3, #16
 8000b8e:	d102      	bne.n	8000b96 <HAL_RCC_OscConfig+0x3e>
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d002      	beq.n	8000b9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d10b      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9c:	4bb9      	ldr	r3, [pc, #740]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d062      	beq.n	8000c6e <HAL_RCC_OscConfig+0x116>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d15e      	bne.n	8000c6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e2ce      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	025b      	lsls	r3, r3, #9
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d107      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x78>
 8000bc0:	4bb0      	ldr	r3, [pc, #704]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4baf      	ldr	r3, [pc, #700]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	0249      	lsls	r1, r1, #9
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e020      	b.n	8000c12 <HAL_RCC_OscConfig+0xba>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	23a0      	movs	r3, #160	@ 0xa0
 8000bd6:	02db      	lsls	r3, r3, #11
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d10e      	bne.n	8000bfa <HAL_RCC_OscConfig+0xa2>
 8000bdc:	4ba9      	ldr	r3, [pc, #676]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4ba8      	ldr	r3, [pc, #672]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	02c9      	lsls	r1, r1, #11
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	4ba6      	ldr	r3, [pc, #664]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4ba5      	ldr	r3, [pc, #660]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bf0:	2180      	movs	r1, #128	@ 0x80
 8000bf2:	0249      	lsls	r1, r1, #9
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	e00b      	b.n	8000c12 <HAL_RCC_OscConfig+0xba>
 8000bfa:	4ba2      	ldr	r3, [pc, #648]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c00:	49a1      	ldr	r1, [pc, #644]	@ (8000e88 <HAL_RCC_OscConfig+0x330>)
 8000c02:	400a      	ands	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	4b9f      	ldr	r3, [pc, #636]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b9e      	ldr	r3, [pc, #632]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c0c:	499f      	ldr	r1, [pc, #636]	@ (8000e8c <HAL_RCC_OscConfig+0x334>)
 8000c0e:	400a      	ands	r2, r1
 8000c10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d014      	beq.n	8000c44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fcf9 	bl	8000610 <HAL_GetTick>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fcf4 	bl	8000610 <HAL_GetTick>
 8000c28:	0002      	movs	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	@ 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e28d      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c36:	4b93      	ldr	r3, [pc, #588]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	2380      	movs	r3, #128	@ 0x80
 8000c3c:	029b      	lsls	r3, r3, #10
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0xcc>
 8000c42:	e015      	b.n	8000c70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c44:	f7ff fce4 	bl	8000610 <HAL_GetTick>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4e:	f7ff fcdf 	bl	8000610 <HAL_GetTick>
 8000c52:	0002      	movs	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b64      	cmp	r3, #100	@ 0x64
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e278      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c60:	4b88      	ldr	r3, [pc, #544]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	2380      	movs	r3, #128	@ 0x80
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d1f0      	bne.n	8000c4e <HAL_RCC_OscConfig+0xf6>
 8000c6c:	e000      	b.n	8000c70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2202      	movs	r2, #2
 8000c76:	4013      	ands	r3, r2
 8000c78:	d100      	bne.n	8000c7c <HAL_RCC_OscConfig+0x124>
 8000c7a:	e099      	b.n	8000db0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c7c:	4b81      	ldr	r3, [pc, #516]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2238      	movs	r2, #56	@ 0x38
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c86:	4b7f      	ldr	r3, [pc, #508]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2b10      	cmp	r3, #16
 8000c94:	d102      	bne.n	8000c9c <HAL_RCC_OscConfig+0x144>
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d002      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d135      	bne.n	8000d0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca2:	4b78      	ldr	r3, [pc, #480]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	2380      	movs	r3, #128	@ 0x80
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4013      	ands	r3, r2
 8000cac:	d005      	beq.n	8000cba <HAL_RCC_OscConfig+0x162>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e24b      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	4b72      	ldr	r3, [pc, #456]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a74      	ldr	r2, [pc, #464]	@ (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	021a      	lsls	r2, r3, #8
 8000cca:	4b6e      	ldr	r3, [pc, #440]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d112      	bne.n	8000cfc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a6e      	ldr	r2, [pc, #440]	@ (8000e94 <HAL_RCC_OscConfig+0x33c>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	0019      	movs	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	4b67      	ldr	r3, [pc, #412]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000cea:	4b66      	ldr	r3, [pc, #408]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	0adb      	lsrs	r3, r3, #11
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	4a68      	ldr	r2, [pc, #416]	@ (8000e98 <HAL_RCC_OscConfig+0x340>)
 8000cf6:	40da      	lsrs	r2, r3
 8000cf8:	4b68      	ldr	r3, [pc, #416]	@ (8000e9c <HAL_RCC_OscConfig+0x344>)
 8000cfa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cfc:	4b68      	ldr	r3, [pc, #416]	@ (8000ea0 <HAL_RCC_OscConfig+0x348>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fc29 	bl	8000558 <HAL_InitTick>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d051      	beq.n	8000dae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e221      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d030      	beq.n	8000d78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000d16:	4b5b      	ldr	r3, [pc, #364]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8000e94 <HAL_RCC_OscConfig+0x33c>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	0019      	movs	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	4b57      	ldr	r3, [pc, #348]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000d2a:	4b56      	ldr	r3, [pc, #344]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4b55      	ldr	r3, [pc, #340]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	0049      	lsls	r1, r1, #1
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc6a 	bl	8000610 <HAL_GetTick>
 8000d3c:	0003      	movs	r3, r0
 8000d3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc65 	bl	8000610 <HAL_GetTick>
 8000d46:	0002      	movs	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e1fe      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d54:	4b4b      	ldr	r3, [pc, #300]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	@ 0x80
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d60:	4b48      	ldr	r3, [pc, #288]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	4a4a      	ldr	r2, [pc, #296]	@ (8000e90 <HAL_RCC_OscConfig+0x338>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	0019      	movs	r1, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	021a      	lsls	r2, r3, #8
 8000d70:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d72:	430a      	orrs	r2, r1
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	e01b      	b.n	8000db0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000d78:	4b42      	ldr	r3, [pc, #264]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	4949      	ldr	r1, [pc, #292]	@ (8000ea4 <HAL_RCC_OscConfig+0x34c>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc44 	bl	8000610 <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fc3f 	bl	8000610 <HAL_GetTick>
 8000d92:	0002      	movs	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e1d8      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000da0:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4013      	ands	r3, r2
 8000daa:	d1f0      	bne.n	8000d8e <HAL_RCC_OscConfig+0x236>
 8000dac:	e000      	b.n	8000db0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2208      	movs	r2, #8
 8000db6:	4013      	ands	r3, r2
 8000db8:	d047      	beq.n	8000e4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2238      	movs	r2, #56	@ 0x38
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	d10a      	bne.n	8000ddc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d03c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x2f2>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d138      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e1ba      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d019      	beq.n	8000e18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000de4:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000de6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc0e 	bl	8000610 <HAL_GetTick>
 8000df4:	0003      	movs	r3, r0
 8000df6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fc09 	bl	8000610 <HAL_GetTick>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e1a2      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e10:	2202      	movs	r2, #2
 8000e12:	4013      	ands	r3, r2
 8000e14:	d0f1      	beq.n	8000dfa <HAL_RCC_OscConfig+0x2a2>
 8000e16:	e018      	b.n	8000e4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438a      	bics	r2, r1
 8000e22:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e24:	f7ff fbf4 	bl	8000610 <HAL_GetTick>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fbef 	bl	8000610 <HAL_GetTick>
 8000e32:	0002      	movs	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e188      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e40:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e44:	2202      	movs	r2, #2
 8000e46:	4013      	ands	r3, r2
 8000e48:	d1f1      	bne.n	8000e2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4013      	ands	r3, r2
 8000e52:	d100      	bne.n	8000e56 <HAL_RCC_OscConfig+0x2fe>
 8000e54:	e0c6      	b.n	8000fe4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	231f      	movs	r3, #31
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2238      	movs	r2, #56	@ 0x38
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b20      	cmp	r3, #32
 8000e68:	d11e      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_RCC_OscConfig+0x32c>)
 8000e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4013      	ands	r3, r2
 8000e72:	d100      	bne.n	8000e76 <HAL_RCC_OscConfig+0x31e>
 8000e74:	e0b6      	b.n	8000fe4 <HAL_RCC_OscConfig+0x48c>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d000      	beq.n	8000e80 <HAL_RCC_OscConfig+0x328>
 8000e7e:	e0b1      	b.n	8000fe4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e166      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
 8000e84:	40021000 	.word	0x40021000
 8000e88:	fffeffff 	.word	0xfffeffff
 8000e8c:	fffbffff 	.word	0xfffbffff
 8000e90:	ffff80ff 	.word	0xffff80ff
 8000e94:	ffffc7ff 	.word	0xffffc7ff
 8000e98:	00f42400 	.word	0x00f42400
 8000e9c:	20000000 	.word	0x20000000
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000ea8:	4bac      	ldr	r3, [pc, #688]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	055b      	lsls	r3, r3, #21
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x360>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <HAL_RCC_OscConfig+0x362>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d011      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4ba7      	ldr	r3, [pc, #668]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ec2:	4ba6      	ldr	r3, [pc, #664]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	0549      	lsls	r1, r1, #21
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ecc:	4ba3      	ldr	r3, [pc, #652]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000ece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	055b      	lsls	r3, r3, #21
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8000eda:	231f      	movs	r3, #31
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ee2:	4b9f      	ldr	r3, [pc, #636]	@ (8001160 <HAL_RCC_OscConfig+0x608>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	2380      	movs	r3, #128	@ 0x80
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4013      	ands	r3, r2
 8000eec:	d11a      	bne.n	8000f24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eee:	4b9c      	ldr	r3, [pc, #624]	@ (8001160 <HAL_RCC_OscConfig+0x608>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b9b      	ldr	r3, [pc, #620]	@ (8001160 <HAL_RCC_OscConfig+0x608>)
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0049      	lsls	r1, r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8000efc:	f7ff fb88 	bl	8000610 <HAL_GetTick>
 8000f00:	0003      	movs	r3, r0
 8000f02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f06:	f7ff fb83 	bl	8000610 <HAL_GetTick>
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e11c      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f18:	4b91      	ldr	r3, [pc, #580]	@ (8001160 <HAL_RCC_OscConfig+0x608>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d106      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3e2>
 8000f2c:	4b8b      	ldr	r3, [pc, #556]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f30:	4b8a      	ldr	r3, [pc, #552]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f32:	2101      	movs	r1, #1
 8000f34:	430a      	orrs	r2, r1
 8000f36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f38:	e01c      	b.n	8000f74 <HAL_RCC_OscConfig+0x41c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d10c      	bne.n	8000f5c <HAL_RCC_OscConfig+0x404>
 8000f42:	4b86      	ldr	r3, [pc, #536]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f46:	4b85      	ldr	r3, [pc, #532]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f48:	2104      	movs	r1, #4
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f4e:	4b83      	ldr	r3, [pc, #524]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f52:	4b82      	ldr	r3, [pc, #520]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f5a:	e00b      	b.n	8000f74 <HAL_RCC_OscConfig+0x41c>
 8000f5c:	4b7f      	ldr	r3, [pc, #508]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f60:	4b7e      	ldr	r3, [pc, #504]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f62:	2101      	movs	r1, #1
 8000f64:	438a      	bics	r2, r1
 8000f66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8000f68:	4b7c      	ldr	r3, [pc, #496]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f6e:	2104      	movs	r1, #4
 8000f70:	438a      	bics	r2, r1
 8000f72:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d014      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb48 	bl	8000610 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f84:	e009      	b.n	8000f9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb43 	bl	8000610 <HAL_GetTick>
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	4a74      	ldr	r2, [pc, #464]	@ (8001164 <HAL_RCC_OscConfig+0x60c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e0db      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f9a:	4b70      	ldr	r3, [pc, #448]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d0f0      	beq.n	8000f86 <HAL_RCC_OscConfig+0x42e>
 8000fa4:	e013      	b.n	8000fce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb33 	bl	8000610 <HAL_GetTick>
 8000faa:	0003      	movs	r3, r0
 8000fac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fae:	e009      	b.n	8000fc4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fb2e 	bl	8000610 <HAL_GetTick>
 8000fb4:	0002      	movs	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a6a      	ldr	r2, [pc, #424]	@ (8001164 <HAL_RCC_OscConfig+0x60c>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e0c6      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fc4:	4b65      	ldr	r3, [pc, #404]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc8:	2202      	movs	r2, #2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d1f0      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8000fce:	231f      	movs	r3, #31
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d105      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8000fd8:	4b60      	ldr	r3, [pc, #384]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fdc:	4b5f      	ldr	r3, [pc, #380]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000fde:	4962      	ldr	r1, [pc, #392]	@ (8001168 <HAL_RCC_OscConfig+0x610>)
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d100      	bne.n	8000fee <HAL_RCC_OscConfig+0x496>
 8000fec:	e0b0      	b.n	8001150 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fee:	4b5b      	ldr	r3, [pc, #364]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	2238      	movs	r2, #56	@ 0x38
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b10      	cmp	r3, #16
 8000ff8:	d100      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4a4>
 8000ffa:	e078      	b.n	80010ee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d153      	bne.n	80010ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001004:	4b55      	ldr	r3, [pc, #340]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b54      	ldr	r3, [pc, #336]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 800100a:	4958      	ldr	r1, [pc, #352]	@ (800116c <HAL_RCC_OscConfig+0x614>)
 800100c:	400a      	ands	r2, r1
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001010:	f7ff fafe 	bl	8000610 <HAL_GetTick>
 8001014:	0003      	movs	r3, r0
 8001016:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101a:	f7ff faf9 	bl	8000610 <HAL_GetTick>
 800101e:	0002      	movs	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e092      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800102c:	4b4b      	ldr	r3, [pc, #300]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	049b      	lsls	r3, r3, #18
 8001034:	4013      	ands	r3, r2
 8001036:	d1f0      	bne.n	800101a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001038:	4b48      	ldr	r3, [pc, #288]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	4a4c      	ldr	r2, [pc, #304]	@ (8001170 <HAL_RCC_OscConfig+0x618>)
 800103e:	4013      	ands	r3, r2
 8001040:	0019      	movs	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1a      	ldr	r2, [r3, #32]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	431a      	orrs	r2, r3
 8001060:	4b3e      	ldr	r3, [pc, #248]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8001062:	430a      	orrs	r2, r1
 8001064:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001066:	4b3d      	ldr	r3, [pc, #244]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b3c      	ldr	r3, [pc, #240]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	0449      	lsls	r1, r1, #17
 8001070:	430a      	orrs	r2, r1
 8001072:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001074:	4b39      	ldr	r3, [pc, #228]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	4b38      	ldr	r3, [pc, #224]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 800107a:	2180      	movs	r1, #128	@ 0x80
 800107c:	0549      	lsls	r1, r1, #21
 800107e:	430a      	orrs	r2, r1
 8001080:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001082:	f7ff fac5 	bl	8000610 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fac0 	bl	8000610 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e059      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	@ 0x80
 80010a4:	049b      	lsls	r3, r3, #18
 80010a6:	4013      	ands	r3, r2
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0x534>
 80010aa:	e051      	b.n	8001150 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ac:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010b2:	492e      	ldr	r1, [pc, #184]	@ (800116c <HAL_RCC_OscConfig+0x614>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b8:	f7ff faaa 	bl	8000610 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff faa5 	bl	8000610 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e03e      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	049b      	lsls	r3, r3, #18
 80010dc:	4013      	ands	r3, r2
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80010e0:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010e6:	4923      	ldr	r1, [pc, #140]	@ (8001174 <HAL_RCC_OscConfig+0x61c>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	e030      	b.n	8001150 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e02b      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <HAL_RCC_OscConfig+0x604>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2203      	movs	r2, #3
 8001104:	401a      	ands	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	429a      	cmp	r2, r3
 800110c:	d11e      	bne.n	800114c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2270      	movs	r2, #112	@ 0x70
 8001112:	401a      	ands	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001118:	429a      	cmp	r2, r3
 800111a:	d117      	bne.n	800114c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	23fe      	movs	r3, #254	@ 0xfe
 8001120:	01db      	lsls	r3, r3, #7
 8001122:	401a      	ands	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800112a:	429a      	cmp	r2, r3
 800112c:	d10e      	bne.n	800114c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	23f8      	movs	r3, #248	@ 0xf8
 8001132:	039b      	lsls	r3, r3, #14
 8001134:	401a      	ands	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	0f5b      	lsrs	r3, r3, #29
 8001142:	075a      	lsls	r2, r3, #29
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b008      	add	sp, #32
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	40007000 	.word	0x40007000
 8001164:	00001388 	.word	0x00001388
 8001168:	efffffff 	.word	0xefffffff
 800116c:	feffffff 	.word	0xfeffffff
 8001170:	1fc1808c 	.word	0x1fc1808c
 8001174:	effefffc 	.word	0xeffefffc

08001178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0e9      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b76      	ldr	r3, [pc, #472]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2207      	movs	r2, #7
 8001192:	4013      	ands	r3, r2
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d91e      	bls.n	80011d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2207      	movs	r2, #7
 80011a0:	4393      	bics	r3, r2
 80011a2:	0019      	movs	r1, r3
 80011a4:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011ac:	f7ff fa30 	bl	8000610 <HAL_GetTick>
 80011b0:	0003      	movs	r3, r0
 80011b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011b4:	e009      	b.n	80011ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b6:	f7ff fa2b 	bl	8000610 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a6a      	ldr	r2, [pc, #424]	@ (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e0ca      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ca:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2207      	movs	r2, #7
 80011d0:	4013      	ands	r3, r2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1ee      	bne.n	80011b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d015      	beq.n	800120e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2204      	movs	r2, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	d006      	beq.n	80011fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011ec:	4b60      	ldr	r3, [pc, #384]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011f2:	21e0      	movs	r1, #224	@ 0xe0
 80011f4:	01c9      	lsls	r1, r1, #7
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <HAL_RCC_ClockConfig+0x1fc>)
 8001200:	4013      	ands	r3, r2
 8001202:	0019      	movs	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b59      	ldr	r3, [pc, #356]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2201      	movs	r2, #1
 8001214:	4013      	ands	r3, r2
 8001216:	d057      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d107      	bne.n	8001230 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001220:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	2380      	movs	r3, #128	@ 0x80
 8001226:	029b      	lsls	r3, r3, #10
 8001228:	4013      	ands	r3, r2
 800122a:	d12b      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e097      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d107      	bne.n	8001248 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001238:	4b4d      	ldr	r3, [pc, #308]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	049b      	lsls	r3, r3, #18
 8001240:	4013      	ands	r3, r2
 8001242:	d11f      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e08b      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d107      	bne.n	8001260 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4013      	ands	r3, r2
 800125a:	d113      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e07f      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d106      	bne.n	8001276 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001268:	4b41      	ldr	r3, [pc, #260]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800126a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126c:	2202      	movs	r2, #2
 800126e:	4013      	ands	r3, r2
 8001270:	d108      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e074      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001276:	4b3e      	ldr	r3, [pc, #248]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e06d      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001284:	4b3a      	ldr	r3, [pc, #232]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2207      	movs	r2, #7
 800128a:	4393      	bics	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b37      	ldr	r3, [pc, #220]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001298:	f7ff f9ba 	bl	8000610 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a2:	f7ff f9b5 	bl	8000610 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e054      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2238      	movs	r2, #56	@ 0x38
 80012bc:	401a      	ands	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1ec      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2207      	movs	r2, #7
 80012ce:	4013      	ands	r3, r2
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d21e      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2207      	movs	r2, #7
 80012dc:	4393      	bics	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012e8:	f7ff f992 	bl	8000610 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f2:	f7ff f98d 	bl	8000610 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <HAL_RCC_ClockConfig+0x1f4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e02c      	b.n	8001360 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001306:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <HAL_RCC_ClockConfig+0x1f0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2207      	movs	r2, #7
 800130c:	4013      	ands	r3, r2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2204      	movs	r2, #4
 800131a:	4013      	ands	r3, r2
 800131c:	d009      	beq.n	8001332 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	4a15      	ldr	r2, [pc, #84]	@ (8001378 <HAL_RCC_ClockConfig+0x200>)
 8001324:	4013      	ands	r3, r2
 8001326:	0019      	movs	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800132e:	430a      	orrs	r2, r1
 8001330:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001332:	f000 f829 	bl	8001388 <HAL_RCC_GetSysClockFreq>
 8001336:	0001      	movs	r1, r0
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <HAL_RCC_ClockConfig+0x1f8>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	220f      	movs	r2, #15
 8001340:	401a      	ands	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_RCC_ClockConfig+0x204>)
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	58d3      	ldr	r3, [r2, r3]
 8001348:	221f      	movs	r2, #31
 800134a:	4013      	ands	r3, r2
 800134c:	000a      	movs	r2, r1
 800134e:	40da      	lsrs	r2, r3
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_ClockConfig+0x208>)
 8001352:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_RCC_ClockConfig+0x20c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff f8fd 	bl	8000558 <HAL_InitTick>
 800135e:	0003      	movs	r3, r0
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40022000 	.word	0x40022000
 800136c:	00001388 	.word	0x00001388
 8001370:	40021000 	.word	0x40021000
 8001374:	fffff0ff 	.word	0xfffff0ff
 8001378:	ffff8fff 	.word	0xffff8fff
 800137c:	08001f94 	.word	0x08001f94
 8001380:	20000000 	.word	0x20000000
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138e:	4b3c      	ldr	r3, [pc, #240]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2238      	movs	r2, #56	@ 0x38
 8001394:	4013      	ands	r3, r2
 8001396:	d10f      	bne.n	80013b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001398:	4b39      	ldr	r3, [pc, #228]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	0adb      	lsrs	r3, r3, #11
 800139e:	2207      	movs	r2, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	2201      	movs	r2, #1
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80013aa:	6839      	ldr	r1, [r7, #0]
 80013ac:	4835      	ldr	r0, [pc, #212]	@ (8001484 <HAL_RCC_GetSysClockFreq+0xfc>)
 80013ae:	f7fe fea7 	bl	8000100 <__udivsi3>
 80013b2:	0003      	movs	r3, r0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	e05d      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013b8:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2238      	movs	r2, #56	@ 0x38
 80013be:	4013      	ands	r3, r2
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d102      	bne.n	80013ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013c4:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x100>)
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e054      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2238      	movs	r2, #56	@ 0x38
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d138      	bne.n	8001448 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	2203      	movs	r2, #3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	2207      	movs	r2, #7
 80013e8:	4013      	ands	r3, r2
 80013ea:	3301      	adds	r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10d      	bne.n	8001410 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	4824      	ldr	r0, [pc, #144]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x100>)
 80013f8:	f7fe fe82 	bl	8000100 <__udivsi3>
 80013fc:	0003      	movs	r3, r0
 80013fe:	0019      	movs	r1, r3
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	0a1b      	lsrs	r3, r3, #8
 8001406:	227f      	movs	r2, #127	@ 0x7f
 8001408:	4013      	ands	r3, r2
 800140a:	434b      	muls	r3, r1
 800140c:	617b      	str	r3, [r7, #20]
        break;
 800140e:	e00d      	b.n	800142c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	481c      	ldr	r0, [pc, #112]	@ (8001484 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001414:	f7fe fe74 	bl	8000100 <__udivsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	0019      	movs	r1, r3
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	227f      	movs	r2, #127	@ 0x7f
 8001424:	4013      	ands	r3, r2
 8001426:	434b      	muls	r3, r1
 8001428:	617b      	str	r3, [r7, #20]
        break;
 800142a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0f5b      	lsrs	r3, r3, #29
 8001432:	2207      	movs	r2, #7
 8001434:	4013      	ands	r3, r2
 8001436:	3301      	adds	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7fe fe5f 	bl	8000100 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e015      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001448:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2238      	movs	r2, #56	@ 0x38
 800144e:	4013      	ands	r3, r2
 8001450:	2b20      	cmp	r3, #32
 8001452:	d103      	bne.n	800145c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <HAL_RCC_GetSysClockFreq+0xf8>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2238      	movs	r2, #56	@ 0x38
 8001462:	4013      	ands	r3, r2
 8001464:	2b18      	cmp	r3, #24
 8001466:	d103      	bne.n	8001470 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001468:	23fa      	movs	r3, #250	@ 0xfa
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	e001      	b.n	8001474 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001474:	693b      	ldr	r3, [r7, #16]
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b006      	add	sp, #24
 800147c:	bd80      	pop	{r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	40021000 	.word	0x40021000
 8001484:	00f42400 	.word	0x00f42400
 8001488:	007a1200 	.word	0x007a1200

0800148c <LCD16X2_DATA>:
#include "../../Util/Util.h"

//-----[ Alphanumeric LCD16X2 Functions ]-----

void LCD16X2_DATA(uint8_t LCD16X2_Index, unsigned char Data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	0002      	movs	r2, r0
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	1dbb      	adds	r3, r7, #6
 800149a:	1c0a      	adds	r2, r1, #0
 800149c:	701a      	strb	r2, [r3, #0]
    if(Data & 1)
 800149e:	1dbb      	adds	r3, r7, #6
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2201      	movs	r2, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d014      	beq.n	80014d2 <LCD16X2_DATA+0x46>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 1);
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4a5a      	ldr	r2, [pc, #360]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80014ae:	2134      	movs	r1, #52	@ 0x34
 80014b0:	434b      	muls	r3, r1
 80014b2:	18d3      	adds	r3, r2, r3
 80014b4:	3304      	adds	r3, #4
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4a56      	ldr	r2, [pc, #344]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80014be:	2134      	movs	r1, #52	@ 0x34
 80014c0:	434b      	muls	r3, r1
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	3308      	adds	r3, #8
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	0019      	movs	r1, r3
 80014cc:	f7ff fae6 	bl	8000a9c <HAL_GPIO_WritePin>
 80014d0:	e013      	b.n	80014fa <LCD16X2_DATA+0x6e>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D4_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D4_PINx, 0);
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	4a50      	ldr	r2, [pc, #320]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80014d8:	2134      	movs	r1, #52	@ 0x34
 80014da:	434b      	muls	r3, r1
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	3304      	adds	r3, #4
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80014e8:	2134      	movs	r1, #52	@ 0x34
 80014ea:	434b      	muls	r3, r1
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	3308      	adds	r3, #8
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	0019      	movs	r1, r3
 80014f6:	f7ff fad1 	bl	8000a9c <HAL_GPIO_WritePin>
    if(Data & 2)
 80014fa:	1dbb      	adds	r3, r7, #6
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d014      	beq.n	800152e <LCD16X2_DATA+0xa2>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 1);
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4a43      	ldr	r2, [pc, #268]	@ (8001618 <LCD16X2_DATA+0x18c>)
 800150a:	2134      	movs	r1, #52	@ 0x34
 800150c:	434b      	muls	r3, r1
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	330c      	adds	r3, #12
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4a3f      	ldr	r2, [pc, #252]	@ (8001618 <LCD16X2_DATA+0x18c>)
 800151a:	2134      	movs	r1, #52	@ 0x34
 800151c:	434b      	muls	r3, r1
 800151e:	18d3      	adds	r3, r2, r3
 8001520:	3310      	adds	r3, #16
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	0019      	movs	r1, r3
 8001528:	f7ff fab8 	bl	8000a9c <HAL_GPIO_WritePin>
 800152c:	e013      	b.n	8001556 <LCD16X2_DATA+0xca>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D5_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D5_PINx, 0);
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <LCD16X2_DATA+0x18c>)
 8001534:	2134      	movs	r1, #52	@ 0x34
 8001536:	434b      	muls	r3, r1
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	330c      	adds	r3, #12
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	4a35      	ldr	r2, [pc, #212]	@ (8001618 <LCD16X2_DATA+0x18c>)
 8001544:	2134      	movs	r1, #52	@ 0x34
 8001546:	434b      	muls	r3, r1
 8001548:	18d3      	adds	r3, r2, r3
 800154a:	3310      	adds	r3, #16
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	0019      	movs	r1, r3
 8001552:	f7ff faa3 	bl	8000a9c <HAL_GPIO_WritePin>
    if(Data & 4)
 8001556:	1dbb      	adds	r3, r7, #6
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d014      	beq.n	800158a <LCD16X2_DATA+0xfe>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 1);
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	4a2c      	ldr	r2, [pc, #176]	@ (8001618 <LCD16X2_DATA+0x18c>)
 8001566:	2134      	movs	r1, #52	@ 0x34
 8001568:	434b      	muls	r3, r1
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	3314      	adds	r3, #20
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <LCD16X2_DATA+0x18c>)
 8001576:	2134      	movs	r1, #52	@ 0x34
 8001578:	434b      	muls	r3, r1
 800157a:	18d3      	adds	r3, r2, r3
 800157c:	3318      	adds	r3, #24
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	0019      	movs	r1, r3
 8001584:	f7ff fa8a 	bl	8000a9c <HAL_GPIO_WritePin>
 8001588:	e013      	b.n	80015b2 <LCD16X2_DATA+0x126>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D6_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D6_PINx, 0);
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <LCD16X2_DATA+0x18c>)
 8001590:	2134      	movs	r1, #52	@ 0x34
 8001592:	434b      	muls	r3, r1
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	3314      	adds	r3, #20
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4a1e      	ldr	r2, [pc, #120]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80015a0:	2134      	movs	r1, #52	@ 0x34
 80015a2:	434b      	muls	r3, r1
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	3318      	adds	r3, #24
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	2200      	movs	r2, #0
 80015ac:	0019      	movs	r1, r3
 80015ae:	f7ff fa75 	bl	8000a9c <HAL_GPIO_WritePin>
    if(Data & 8)
 80015b2:	1dbb      	adds	r3, r7, #6
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	d014      	beq.n	80015e6 <LCD16X2_DATA+0x15a>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 1);
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4a15      	ldr	r2, [pc, #84]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80015c2:	2134      	movs	r1, #52	@ 0x34
 80015c4:	434b      	muls	r3, r1
 80015c6:	18d3      	adds	r3, r2, r3
 80015c8:	331c      	adds	r3, #28
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80015d2:	2134      	movs	r1, #52	@ 0x34
 80015d4:	434b      	muls	r3, r1
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	3320      	adds	r3, #32
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	0019      	movs	r1, r3
 80015e0:	f7ff fa5c 	bl	8000a9c <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
}
 80015e4:	e013      	b.n	800160e <LCD16X2_DATA+0x182>
    	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].D7_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].D7_PINx, 0);
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80015ec:	2134      	movs	r1, #52	@ 0x34
 80015ee:	434b      	muls	r3, r1
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	331c      	adds	r3, #28
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <LCD16X2_DATA+0x18c>)
 80015fc:	2134      	movs	r1, #52	@ 0x34
 80015fe:	434b      	muls	r3, r1
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	3320      	adds	r3, #32
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	0019      	movs	r1, r3
 800160a:	f7ff fa47 	bl	8000a9c <HAL_GPIO_WritePin>
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	08001fd4 	.word	0x08001fd4

0800161c <LCD16X2_CMD>:

void LCD16X2_CMD(uint8_t LCD16X2_Index, unsigned char CMD)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	0002      	movs	r2, r0
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	1c0a      	adds	r2, r1, #0
 800162c:	701a      	strb	r2, [r3, #0]
    // Select Command Register
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 800162e:	1dfb      	adds	r3, r7, #7
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4a5c      	ldr	r2, [pc, #368]	@ (80017a4 <LCD16X2_CMD+0x188>)
 8001634:	2134      	movs	r1, #52	@ 0x34
 8001636:	434b      	muls	r3, r1
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	332c      	adds	r3, #44	@ 0x2c
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4a58      	ldr	r2, [pc, #352]	@ (80017a4 <LCD16X2_CMD+0x188>)
 8001644:	2134      	movs	r1, #52	@ 0x34
 8001646:	434b      	muls	r3, r1
 8001648:	18d3      	adds	r3, r2, r3
 800164a:	3330      	adds	r3, #48	@ 0x30
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	0019      	movs	r1, r3
 8001652:	f7ff fa23 	bl	8000a9c <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
	LCD16X2_DATA(LCD16X2_Index, CMD);
 8001656:	1dbb      	adds	r3, r7, #6
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f7ff ff13 	bl	800148c <LCD16X2_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001666:	1dfb      	adds	r3, r7, #7
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	4a4e      	ldr	r2, [pc, #312]	@ (80017a4 <LCD16X2_CMD+0x188>)
 800166c:	2134      	movs	r1, #52	@ 0x34
 800166e:	434b      	muls	r3, r1
 8001670:	18d3      	adds	r3, r2, r3
 8001672:	3324      	adds	r3, #36	@ 0x24
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4a4a      	ldr	r2, [pc, #296]	@ (80017a4 <LCD16X2_CMD+0x188>)
 800167c:	2134      	movs	r1, #52	@ 0x34
 800167e:	434b      	muls	r3, r1
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	3328      	adds	r3, #40	@ 0x28
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	0019      	movs	r1, r3
 800168a:	f7ff fa07 	bl	8000a9c <HAL_GPIO_WritePin>
    DELAY_US(5);
 800168e:	4b46      	ldr	r3, [pc, #280]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <LCD16X2_CMD+0x190>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4945      	ldr	r1, [pc, #276]	@ (80017b0 <LCD16X2_CMD+0x194>)
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe fd30 	bl	8000100 <__udivsi3>
 80016a0:	0003      	movs	r3, r0
 80016a2:	001a      	movs	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	189c      	adds	r4, r3, r2
 80016aa:	4b40      	ldr	r3, [pc, #256]	@ (80017ac <LCD16X2_CMD+0x190>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4940      	ldr	r1, [pc, #256]	@ (80017b0 <LCD16X2_CMD+0x194>)
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7fe fd25 	bl	8000100 <__udivsi3>
 80016b6:	0003      	movs	r3, r0
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	1ae3      	subs	r3, r4, r3
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b3a      	ldr	r3, [pc, #232]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	69fa      	ldr	r2, [r7, #28]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d8f8      	bhi.n	80016be <LCD16X2_CMD+0xa2>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4a34      	ldr	r2, [pc, #208]	@ (80017a4 <LCD16X2_CMD+0x188>)
 80016d2:	2134      	movs	r1, #52	@ 0x34
 80016d4:	434b      	muls	r3, r1
 80016d6:	18d3      	adds	r3, r2, r3
 80016d8:	3324      	adds	r3, #36	@ 0x24
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4a30      	ldr	r2, [pc, #192]	@ (80017a4 <LCD16X2_CMD+0x188>)
 80016e2:	2134      	movs	r1, #52	@ 0x34
 80016e4:	434b      	muls	r3, r1
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	3328      	adds	r3, #40	@ 0x28
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	0019      	movs	r1, r3
 80016f0:	f7ff f9d4 	bl	8000a9c <HAL_GPIO_WritePin>
    DELAY_US(5);
 80016f4:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	4b2c      	ldr	r3, [pc, #176]	@ (80017ac <LCD16X2_CMD+0x190>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	492c      	ldr	r1, [pc, #176]	@ (80017b0 <LCD16X2_CMD+0x194>)
 8001700:	0018      	movs	r0, r3
 8001702:	f7fe fcfd 	bl	8000100 <__udivsi3>
 8001706:	0003      	movs	r3, r0
 8001708:	001a      	movs	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	189c      	adds	r4, r3, r2
 8001710:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <LCD16X2_CMD+0x190>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4926      	ldr	r1, [pc, #152]	@ (80017b0 <LCD16X2_CMD+0x194>)
 8001716:	0018      	movs	r0, r3
 8001718:	f7fe fcf2 	bl	8000100 <__udivsi3>
 800171c:	0003      	movs	r3, r0
 800171e:	085b      	lsrs	r3, r3, #1
 8001720:	1ae3      	subs	r3, r4, r3
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	429a      	cmp	r2, r3
 8001730:	d8f8      	bhi.n	8001724 <LCD16X2_CMD+0x108>
    HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <LCD16X2_CMD+0x188>)
 8001738:	2134      	movs	r1, #52	@ 0x34
 800173a:	434b      	muls	r3, r1
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	3324      	adds	r3, #36	@ 0x24
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4a17      	ldr	r2, [pc, #92]	@ (80017a4 <LCD16X2_CMD+0x188>)
 8001748:	2134      	movs	r1, #52	@ 0x34
 800174a:	434b      	muls	r3, r1
 800174c:	18d3      	adds	r3, r2, r3
 800174e:	3328      	adds	r3, #40	@ 0x28
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	0019      	movs	r1, r3
 8001756:	f7ff f9a1 	bl	8000a9c <HAL_GPIO_WritePin>
    DELAY_US(100);
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <LCD16X2_CMD+0x190>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4912      	ldr	r1, [pc, #72]	@ (80017b0 <LCD16X2_CMD+0x194>)
 8001766:	0018      	movs	r0, r3
 8001768:	f7fe fcca 	bl	8000100 <__udivsi3>
 800176c:	0003      	movs	r3, r0
 800176e:	001a      	movs	r2, r3
 8001770:	2364      	movs	r3, #100	@ 0x64
 8001772:	4353      	muls	r3, r2
 8001774:	001c      	movs	r4, r3
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <LCD16X2_CMD+0x190>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	490d      	ldr	r1, [pc, #52]	@ (80017b0 <LCD16X2_CMD+0x194>)
 800177c:	0018      	movs	r0, r3
 800177e:	f7fe fcbf 	bl	8000100 <__udivsi3>
 8001782:	0003      	movs	r3, r0
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	1ae3      	subs	r3, r4, r3
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <LCD16X2_CMD+0x18c>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f8      	bhi.n	800178a <LCD16X2_CMD+0x16e>
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b009      	add	sp, #36	@ 0x24
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	08001fd4 	.word	0x08001fd4
 80017a8:	e000e010 	.word	0xe000e010
 80017ac:	20000000 	.word	0x20000000
 80017b0:	000f4240 	.word	0x000f4240

080017b4 <LCD16X2_Clear>:

void LCD16X2_Clear(uint8_t LCD16X2_Index)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	0002      	movs	r2, r0
 80017bc:	1dfb      	adds	r3, r7, #7
 80017be:	701a      	strb	r2, [r3, #0]
	LCD16X2_CMD(LCD16X2_Index, 0);
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2100      	movs	r1, #0
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff28 	bl	800161c <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 1);
 80017cc:	1dfb      	adds	r3, r7, #7
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2101      	movs	r1, #1
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7ff ff22 	bl	800161c <LCD16X2_CMD>
    DELAY_MS(2);
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e025      	b.n	800182a <LCD16X2_Clear+0x76>
 80017de:	4b17      	ldr	r3, [pc, #92]	@ (800183c <LCD16X2_Clear+0x88>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <LCD16X2_Clear+0x8c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4916      	ldr	r1, [pc, #88]	@ (8001844 <LCD16X2_Clear+0x90>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7fe fc88 	bl	8000100 <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	001a      	movs	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	001c      	movs	r4, r3
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <LCD16X2_Clear+0x8c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	490f      	ldr	r1, [pc, #60]	@ (8001844 <LCD16X2_Clear+0x90>)
 8001808:	0018      	movs	r0, r3
 800180a:	f7fe fc79 	bl	8000100 <__udivsi3>
 800180e:	0003      	movs	r3, r0
 8001810:	085b      	lsrs	r3, r3, #1
 8001812:	1ae3      	subs	r3, r4, r3
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <LCD16X2_Clear+0x88>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f8      	bhi.n	8001816 <LCD16X2_Clear+0x62>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d9d6      	bls.n	80017de <LCD16X2_Clear+0x2a>
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b007      	add	sp, #28
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	e000e010 	.word	0xe000e010
 8001840:	20000000 	.word	0x20000000
 8001844:	000f4240 	.word	0x000f4240

08001848 <LCD16X2_Set_Cursor>:

void LCD16X2_Set_Cursor(uint8_t LCD16X2_Index, unsigned char r, unsigned char c)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	0004      	movs	r4, r0
 8001850:	0008      	movs	r0, r1
 8001852:	0011      	movs	r1, r2
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	1c22      	adds	r2, r4, #0
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	1dbb      	adds	r3, r7, #6
 800185c:	1c02      	adds	r2, r0, #0
 800185e:	701a      	strb	r2, [r3, #0]
 8001860:	1d7b      	adds	r3, r7, #5
 8001862:	1c0a      	adds	r2, r1, #0
 8001864:	701a      	strb	r2, [r3, #0]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d122      	bne.n	80018b4 <LCD16X2_Set_Cursor+0x6c>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 800186e:	210f      	movs	r1, #15
 8001870:	187b      	adds	r3, r7, r1
 8001872:	1d7a      	adds	r2, r7, #5
 8001874:	7812      	ldrb	r2, [r2, #0]
 8001876:	327f      	adds	r2, #127	@ 0x7f
 8001878:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 800187a:	200e      	movs	r0, #14
 800187c:	183b      	adds	r3, r7, r0
 800187e:	187a      	adds	r2, r7, r1
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	0912      	lsrs	r2, r2, #4
 8001884:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 8001886:	240d      	movs	r4, #13
 8001888:	193b      	adds	r3, r7, r4
 800188a:	187a      	adds	r2, r7, r1
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	210f      	movs	r1, #15
 8001890:	400a      	ands	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
      LCD16X2_CMD(LCD16X2_Index, High4);
 8001894:	183b      	adds	r3, r7, r0
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff febc 	bl	800161c <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	781a      	ldrb	r2, [r3, #0]
 80018a8:	1dfb      	adds	r3, r7, #7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff feb4 	bl	800161c <LCD16X2_CMD>
    }
    if(r == 2)
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d122      	bne.n	8001902 <LCD16X2_Set_Cursor+0xba>
    {
      Temp  = 0xC0 + c - 1;
 80018bc:	210f      	movs	r1, #15
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	1d7a      	adds	r2, r7, #5
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	3a41      	subs	r2, #65	@ 0x41
 80018c6:	701a      	strb	r2, [r3, #0]
      High4 = Temp >> 4;
 80018c8:	200e      	movs	r0, #14
 80018ca:	183b      	adds	r3, r7, r0
 80018cc:	187a      	adds	r2, r7, r1
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	0912      	lsrs	r2, r2, #4
 80018d2:	701a      	strb	r2, [r3, #0]
      Low4  = Temp & 0x0F;
 80018d4:	240d      	movs	r4, #13
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	187a      	adds	r2, r7, r1
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	210f      	movs	r1, #15
 80018de:	400a      	ands	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
      LCD16X2_CMD(LCD16X2_Index, High4);
 80018e2:	183b      	adds	r3, r7, r0
 80018e4:	781a      	ldrb	r2, [r3, #0]
 80018e6:	1dfb      	adds	r3, r7, #7
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fe95 	bl	800161c <LCD16X2_CMD>
      LCD16X2_CMD(LCD16X2_Index, Low4);
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	1dfb      	adds	r3, r7, #7
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff fe8d 	bl	800161c <LCD16X2_CMD>
    }
}
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	b005      	add	sp, #20
 8001908:	bd90      	pop	{r4, r7, pc}
	...

0800190c <LCD16X2_Init>:

void LCD16X2_Init(uint8_t LCD16X2_Index)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b08f      	sub	sp, #60	@ 0x3c
 8001910:	af00      	add	r7, sp, #0
 8001912:	0002      	movs	r2, r0
 8001914:	1dfb      	adds	r3, r7, #7
 8001916:	701a      	strb	r2, [r3, #0]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	f7fe fe79 	bl	8000610 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	2b31      	cmp	r3, #49	@ 0x31
 8001922:	d9fa      	bls.n	800191a <LCD16X2_Init+0xe>
	// The Init. Procedure As Described In The Datasheet
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 0);
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4a8d      	ldr	r2, [pc, #564]	@ (8001b60 <LCD16X2_Init+0x254>)
 800192a:	2134      	movs	r1, #52	@ 0x34
 800192c:	434b      	muls	r3, r1
 800192e:	18d3      	adds	r3, r2, r3
 8001930:	332c      	adds	r3, #44	@ 0x2c
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	1dfb      	adds	r3, r7, #7
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4a89      	ldr	r2, [pc, #548]	@ (8001b60 <LCD16X2_Init+0x254>)
 800193a:	2134      	movs	r1, #52	@ 0x34
 800193c:	434b      	muls	r3, r1
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	3330      	adds	r3, #48	@ 0x30
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	0019      	movs	r1, r3
 8001948:	f7ff f8a8 	bl	8000a9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4a83      	ldr	r2, [pc, #524]	@ (8001b60 <LCD16X2_Init+0x254>)
 8001952:	2134      	movs	r1, #52	@ 0x34
 8001954:	434b      	muls	r3, r1
 8001956:	18d3      	adds	r3, r2, r3
 8001958:	3324      	adds	r3, #36	@ 0x24
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4a7f      	ldr	r2, [pc, #508]	@ (8001b60 <LCD16X2_Init+0x254>)
 8001962:	2134      	movs	r1, #52	@ 0x34
 8001964:	434b      	muls	r3, r1
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	3328      	adds	r3, #40	@ 0x28
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	0019      	movs	r1, r3
 8001970:	f7ff f894 	bl	8000a9c <HAL_GPIO_WritePin>
    // Init in 4-Bit Data Mode
	LCD16X2_DATA(LCD16X2_Index, 0x00);
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2100      	movs	r1, #0
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff fd86 	bl	800148c <LCD16X2_DATA>
    DELAY_MS(150);
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
 8001984:	e025      	b.n	80019d2 <LCD16X2_Init+0xc6>
 8001986:	4b77      	ldr	r3, [pc, #476]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <LCD16X2_Init+0x25c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4976      	ldr	r1, [pc, #472]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe fbb4 	bl	8000100 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	001a      	movs	r2, r3
 800199c:	0013      	movs	r3, r2
 800199e:	015b      	lsls	r3, r3, #5
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	189b      	adds	r3, r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	001c      	movs	r4, r3
 80019aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <LCD16X2_Init+0x25c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	496f      	ldr	r1, [pc, #444]	@ (8001b6c <LCD16X2_Init+0x260>)
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7fe fba5 	bl	8000100 <__udivsi3>
 80019b6:	0003      	movs	r3, r0
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	1ae3      	subs	r3, r4, r3
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b69      	ldr	r3, [pc, #420]	@ (8001b64 <LCD16X2_Init+0x258>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f8      	bhi.n	80019be <LCD16X2_Init+0xb2>
 80019cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019ce:	3301      	adds	r3, #1
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019d4:	2b95      	cmp	r3, #149	@ 0x95
 80019d6:	d9d6      	bls.n	8001986 <LCD16X2_Init+0x7a>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 80019d8:	1dfb      	adds	r3, r7, #7
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2103      	movs	r1, #3
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fe1c 	bl	800161c <LCD16X2_CMD>
    DELAY_MS(5);
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e8:	e025      	b.n	8001a36 <LCD16X2_Init+0x12a>
 80019ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <LCD16X2_Init+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b68 <LCD16X2_Init+0x25c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	495d      	ldr	r1, [pc, #372]	@ (8001b6c <LCD16X2_Init+0x260>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fb82 	bl	8000100 <__udivsi3>
 80019fc:	0003      	movs	r3, r0
 80019fe:	001a      	movs	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	189b      	adds	r3, r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	001c      	movs	r4, r3
 8001a0e:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <LCD16X2_Init+0x25c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4956      	ldr	r1, [pc, #344]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe fb73 	bl	8000100 <__udivsi3>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	1ae3      	subs	r3, r4, r3
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b50      	ldr	r3, [pc, #320]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f8      	bhi.n	8001a22 <LCD16X2_Init+0x116>
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	3301      	adds	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d9d6      	bls.n	80019ea <LCD16X2_Init+0xde>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2103      	movs	r1, #3
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff fdea 	bl	800161c <LCD16X2_CMD>
    DELAY_MS(5);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a4c:	e025      	b.n	8001a9a <LCD16X2_Init+0x18e>
 8001a4e:	4b45      	ldr	r3, [pc, #276]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	623b      	str	r3, [r7, #32]
 8001a54:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <LCD16X2_Init+0x25c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4944      	ldr	r1, [pc, #272]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe fb50 	bl	8000100 <__udivsi3>
 8001a60:	0003      	movs	r3, r0
 8001a62:	001a      	movs	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	189b      	adds	r3, r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	001c      	movs	r4, r3
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <LCD16X2_Init+0x25c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	493d      	ldr	r1, [pc, #244]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7fe fb41 	bl	8000100 <__udivsi3>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	085b      	lsrs	r3, r3, #1
 8001a82:	1ae3      	subs	r3, r4, r3
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	4b37      	ldr	r3, [pc, #220]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	6a3a      	ldr	r2, [r7, #32]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d8f8      	bhi.n	8001a86 <LCD16X2_Init+0x17a>
 8001a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a96:	3301      	adds	r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d9d6      	bls.n	8001a4e <LCD16X2_Init+0x142>
    LCD16X2_CMD(LCD16X2_Index, 0x03);
 8001aa0:	1dfb      	adds	r3, r7, #7
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff fdb8 	bl	800161c <LCD16X2_CMD>
    DELAY_US(150);
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b68 <LCD16X2_Init+0x25c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	492d      	ldr	r1, [pc, #180]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7fe fb21 	bl	8000100 <__udivsi3>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	001a      	movs	r2, r3
 8001ac2:	2396      	movs	r3, #150	@ 0x96
 8001ac4:	4353      	muls	r3, r2
 8001ac6:	001c      	movs	r4, r3
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <LCD16X2_Init+0x25c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4927      	ldr	r1, [pc, #156]	@ (8001b6c <LCD16X2_Init+0x260>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe fb16 	bl	8000100 <__udivsi3>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	1ae3      	subs	r3, r4, r3
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <LCD16X2_Init+0x258>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8f8      	bhi.n	8001adc <LCD16X2_Init+0x1d0>
    // The Rest of The Init Sequence As Defined in The Hitachi HD44780 Datasheet
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2102      	movs	r1, #2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff fd93 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x02);
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2102      	movs	r1, #2
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fd8d 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x08);
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2108      	movs	r1, #8
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff fd87 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2100      	movs	r1, #0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fd81 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	210c      	movs	r1, #12
 8001b20:	0018      	movs	r0, r3
 8001b22:	f7ff fd7b 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001b26:	1dfb      	adds	r3, r7, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fd75 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x06);
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2106      	movs	r1, #6
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fd6f 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x00);
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2100      	movs	r1, #0
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff fd69 	bl	800161c <LCD16X2_CMD>
    LCD16X2_CMD(LCD16X2_Index, 0x01);
 8001b4a:	1dfb      	adds	r3, r7, #7
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2101      	movs	r1, #1
 8001b50:	0018      	movs	r0, r3
 8001b52:	f7ff fd63 	bl	800161c <LCD16X2_CMD>
}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b00f      	add	sp, #60	@ 0x3c
 8001b5c:	bd90      	pop	{r4, r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	08001fd4 	.word	0x08001fd4
 8001b64:	e000e010 	.word	0xe000e010
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	000f4240 	.word	0x000f4240

08001b70 <LCD16X2_Write_Char>:

void LCD16X2_Write_Char(uint8_t LCD16X2_Index, char Data)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b091      	sub	sp, #68	@ 0x44
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	0002      	movs	r2, r0
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	701a      	strb	r2, [r3, #0]
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	1c0a      	adds	r2, r1, #0
 8001b80:	701a      	strb	r2, [r3, #0]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8001b82:	233f      	movs	r3, #63	@ 0x3f
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	1dba      	adds	r2, r7, #6
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
   High4 = Data & 0xF0;
 8001b90:	243e      	movs	r4, #62	@ 0x3e
 8001b92:	193b      	adds	r3, r7, r4
 8001b94:	1dba      	adds	r2, r7, #6
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	438a      	bics	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]

   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].RS_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].RS_PINx, 1);
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4aae      	ldr	r2, [pc, #696]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001ba4:	2134      	movs	r1, #52	@ 0x34
 8001ba6:	434b      	muls	r3, r1
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	332c      	adds	r3, #44	@ 0x2c
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4aaa      	ldr	r2, [pc, #680]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001bb4:	2134      	movs	r1, #52	@ 0x34
 8001bb6:	434b      	muls	r3, r1
 8001bb8:	18d3      	adds	r3, r2, r3
 8001bba:	3330      	adds	r3, #48	@ 0x30
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	f7fe ff6b 	bl	8000a9c <HAL_GPIO_WritePin>

   LCD16X2_DATA(LCD16X2_Index, (High4>>4));
 8001bc6:	193b      	adds	r3, r7, r4
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	0011      	movs	r1, r2
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff fc59 	bl	800148c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001bda:	1dfb      	adds	r3, r7, #7
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4a9f      	ldr	r2, [pc, #636]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001be0:	2134      	movs	r1, #52	@ 0x34
 8001be2:	434b      	muls	r3, r1
 8001be4:	18d3      	adds	r3, r2, r3
 8001be6:	3324      	adds	r3, #36	@ 0x24
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	1dfb      	adds	r3, r7, #7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4a9b      	ldr	r2, [pc, #620]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001bf0:	2134      	movs	r1, #52	@ 0x34
 8001bf2:	434b      	muls	r3, r1
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	3328      	adds	r3, #40	@ 0x28
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	f7fe ff4d 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001c02:	4b97      	ldr	r3, [pc, #604]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4996      	ldr	r1, [pc, #600]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7fe fa76 	bl	8000100 <__udivsi3>
 8001c14:	0003      	movs	r3, r0
 8001c16:	001a      	movs	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	189c      	adds	r4, r3, r2
 8001c1e:	4b91      	ldr	r3, [pc, #580]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4991      	ldr	r1, [pc, #580]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7fe fa6b 	bl	8000100 <__udivsi3>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	1ae3      	subs	r3, r4, r3
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c32:	4b8b      	ldr	r3, [pc, #556]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f8      	bhi.n	8001c32 <LCD16X2_Write_Char+0xc2>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001c40:	1dfb      	adds	r3, r7, #7
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	4a85      	ldr	r2, [pc, #532]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001c46:	2134      	movs	r1, #52	@ 0x34
 8001c48:	434b      	muls	r3, r1
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	3324      	adds	r3, #36	@ 0x24
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4a81      	ldr	r2, [pc, #516]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001c56:	2134      	movs	r1, #52	@ 0x34
 8001c58:	434b      	muls	r3, r1
 8001c5a:	18d3      	adds	r3, r2, r3
 8001c5c:	3328      	adds	r3, #40	@ 0x28
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	0019      	movs	r1, r3
 8001c64:	f7fe ff1a 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001c68:	4b7d      	ldr	r3, [pc, #500]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	497d      	ldr	r1, [pc, #500]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7fe fa43 	bl	8000100 <__udivsi3>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	189c      	adds	r4, r3, r2
 8001c84:	4b77      	ldr	r3, [pc, #476]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4977      	ldr	r1, [pc, #476]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7fe fa38 	bl	8000100 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	085b      	lsrs	r3, r3, #1
 8001c94:	1ae3      	subs	r3, r4, r3
 8001c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c98:	4b71      	ldr	r3, [pc, #452]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d8f8      	bhi.n	8001c98 <LCD16X2_Write_Char+0x128>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001cac:	2134      	movs	r1, #52	@ 0x34
 8001cae:	434b      	muls	r3, r1
 8001cb0:	18d3      	adds	r3, r2, r3
 8001cb2:	3324      	adds	r3, #36	@ 0x24
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4a68      	ldr	r2, [pc, #416]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001cbc:	2134      	movs	r1, #52	@ 0x34
 8001cbe:	434b      	muls	r3, r1
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	3328      	adds	r3, #40	@ 0x28
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	0019      	movs	r1, r3
 8001cca:	f7fe fee7 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001cce:	4b64      	ldr	r3, [pc, #400]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd4:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4963      	ldr	r1, [pc, #396]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001cda:	0018      	movs	r0, r3
 8001cdc:	f7fe fa10 	bl	8000100 <__udivsi3>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	2364      	movs	r3, #100	@ 0x64
 8001ce6:	4353      	muls	r3, r2
 8001ce8:	001c      	movs	r4, r3
 8001cea:	4b5e      	ldr	r3, [pc, #376]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	495e      	ldr	r1, [pc, #376]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7fe fa05 	bl	8000100 <__udivsi3>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	1ae3      	subs	r3, r4, r3
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cfe:	4b58      	ldr	r3, [pc, #352]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f8      	bhi.n	8001cfe <LCD16X2_Write_Char+0x18e>

   LCD16X2_DATA(LCD16X2_Index, Low4);
 8001d0c:	233f      	movs	r3, #63	@ 0x3f
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fbb7 	bl	800148c <LCD16X2_DATA>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4a4e      	ldr	r2, [pc, #312]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001d24:	2134      	movs	r1, #52	@ 0x34
 8001d26:	434b      	muls	r3, r1
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	3324      	adds	r3, #36	@ 0x24
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	1dfb      	adds	r3, r7, #7
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	4a4a      	ldr	r2, [pc, #296]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001d34:	2134      	movs	r1, #52	@ 0x34
 8001d36:	434b      	muls	r3, r1
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	3328      	adds	r3, #40	@ 0x28
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	0019      	movs	r1, r3
 8001d42:	f7fe feab 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	623b      	str	r3, [r7, #32]
 8001d4c:	4b45      	ldr	r3, [pc, #276]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4945      	ldr	r1, [pc, #276]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe f9d4 	bl	8000100 <__udivsi3>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	189c      	adds	r4, r3, r2
 8001d62:	4b40      	ldr	r3, [pc, #256]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4940      	ldr	r1, [pc, #256]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7fe f9c9 	bl	8000100 <__udivsi3>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	1ae3      	subs	r3, r4, r3
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	4b3a      	ldr	r3, [pc, #232]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	6a3a      	ldr	r2, [r7, #32]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d8f8      	bhi.n	8001d76 <LCD16X2_Write_Char+0x206>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 1);
 8001d84:	1dfb      	adds	r3, r7, #7
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001d8a:	2134      	movs	r1, #52	@ 0x34
 8001d8c:	434b      	muls	r3, r1
 8001d8e:	18d3      	adds	r3, r2, r3
 8001d90:	3324      	adds	r3, #36	@ 0x24
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001d9a:	2134      	movs	r1, #52	@ 0x34
 8001d9c:	434b      	muls	r3, r1
 8001d9e:	18d3      	adds	r3, r2, r3
 8001da0:	3328      	adds	r3, #40	@ 0x28
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	0019      	movs	r1, r3
 8001da8:	f7fe fe78 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(5);
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	492c      	ldr	r1, [pc, #176]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7fe f9a1 	bl	8000100 <__udivsi3>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	001a      	movs	r2, r3
 8001dc2:	0013      	movs	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	189c      	adds	r4, r3, r2
 8001dc8:	4b26      	ldr	r3, [pc, #152]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4926      	ldr	r1, [pc, #152]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe f996 	bl	8000100 <__udivsi3>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	1ae3      	subs	r3, r4, r3
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d8f8      	bhi.n	8001ddc <LCD16X2_Write_Char+0x26c>
   HAL_GPIO_WritePin(LCD16X2_CfgParam[LCD16X2_Index].EN_GPIOx, LCD16X2_CfgParam[LCD16X2_Index].EN_PINx, 0);
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001df0:	2134      	movs	r1, #52	@ 0x34
 8001df2:	434b      	muls	r3, r1
 8001df4:	18d3      	adds	r3, r2, r3
 8001df6:	3324      	adds	r3, #36	@ 0x24
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <LCD16X2_Write_Char+0x2ec>)
 8001e00:	2134      	movs	r1, #52	@ 0x34
 8001e02:	434b      	muls	r3, r1
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	3328      	adds	r3, #40	@ 0x28
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	f7fe fe45 	bl	8000a9c <HAL_GPIO_WritePin>
   DELAY_US(100);
 8001e12:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4912      	ldr	r1, [pc, #72]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe f96e 	bl	8000100 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	001a      	movs	r2, r3
 8001e28:	2364      	movs	r3, #100	@ 0x64
 8001e2a:	4353      	muls	r3, r2
 8001e2c:	001c      	movs	r4, r3
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <LCD16X2_Write_Char+0x2f4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LCD16X2_Write_Char+0x2f8>)
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7fe f963 	bl	8000100 <__udivsi3>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	085b      	lsrs	r3, r3, #1
 8001e3e:	1ae3      	subs	r3, r4, r3
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <LCD16X2_Write_Char+0x2f0>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f8      	bhi.n	8001e42 <LCD16X2_Write_Char+0x2d2>
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b011      	add	sp, #68	@ 0x44
 8001e58:	bd90      	pop	{r4, r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	08001fd4 	.word	0x08001fd4
 8001e60:	e000e010 	.word	0xe000e010
 8001e64:	20000000 	.word	0x20000000
 8001e68:	000f4240 	.word	0x000f4240

08001e6c <LCD16X2_Write_String>:

void LCD16X2_Write_String(uint8_t LCD16X2_Index, char *str)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	0002      	movs	r2, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	701a      	strb	r2, [r3, #0]
    int i;
    for(i=0; str[i]!='\0'; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e00c      	b.n	8001e9a <LCD16X2_Write_String+0x2e>
    {
    	LCD16X2_Write_Char(LCD16X2_Index, str[i]);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	18d3      	adds	r3, r2, r3
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fe6e 	bl	8001b70 <LCD16X2_Write_Char>
    for(i=0; str[i]!='\0'; i++)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ec      	bne.n	8001e80 <LCD16X2_Write_String+0x14>
    }
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <LCD16X2_SL>:

void LCD16X2_SL(uint8_t LCD16X2_Index)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	701a      	strb	r2, [r3, #0]
	LCD16X2_CMD(LCD16X2_Index, 0x01);
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f7ff fbaa 	bl	800161c <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x08);
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2108      	movs	r1, #8
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff fba4 	bl	800161c <LCD16X2_CMD>
}
 8001ed4:	46c0      	nop			@ (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b002      	add	sp, #8
 8001eda:	bd80      	pop	{r7, pc}

08001edc <LCD16X2_SR>:

void LCD16X2_SR(uint8_t LCD16X2_Index)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	701a      	strb	r2, [r3, #0]
	LCD16X2_CMD(LCD16X2_Index, 0x01);
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f7ff fb94 	bl	800161c <LCD16X2_CMD>
	LCD16X2_CMD(LCD16X2_Index, 0x0C);
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	210c      	movs	r1, #12
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff fb8e 	bl	800161c <LCD16X2_CMD>
}
 8001f00:	46c0      	nop			@ (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <memset>:
 8001f08:	0003      	movs	r3, r0
 8001f0a:	1882      	adds	r2, r0, r2
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <memset+0xa>
 8001f10:	4770      	bx	lr
 8001f12:	7019      	strb	r1, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	e7f9      	b.n	8001f0c <memset+0x4>

08001f18 <__libc_init_array>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	2600      	movs	r6, #0
 8001f1c:	4c0c      	ldr	r4, [pc, #48]	@ (8001f50 <__libc_init_array+0x38>)
 8001f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8001f54 <__libc_init_array+0x3c>)
 8001f20:	1b64      	subs	r4, r4, r5
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	42a6      	cmp	r6, r4
 8001f26:	d109      	bne.n	8001f3c <__libc_init_array+0x24>
 8001f28:	2600      	movs	r6, #0
 8001f2a:	f000 f819 	bl	8001f60 <_init>
 8001f2e:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <__libc_init_array+0x40>)
 8001f30:	4d0a      	ldr	r5, [pc, #40]	@ (8001f5c <__libc_init_array+0x44>)
 8001f32:	1b64      	subs	r4, r4, r5
 8001f34:	10a4      	asrs	r4, r4, #2
 8001f36:	42a6      	cmp	r6, r4
 8001f38:	d105      	bne.n	8001f46 <__libc_init_array+0x2e>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	00b3      	lsls	r3, r6, #2
 8001f3e:	58eb      	ldr	r3, [r5, r3]
 8001f40:	4798      	blx	r3
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7ee      	b.n	8001f24 <__libc_init_array+0xc>
 8001f46:	00b3      	lsls	r3, r6, #2
 8001f48:	58eb      	ldr	r3, [r5, r3]
 8001f4a:	4798      	blx	r3
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	e7f2      	b.n	8001f36 <__libc_init_array+0x1e>
 8001f50:	08002008 	.word	0x08002008
 8001f54:	08002008 	.word	0x08002008
 8001f58:	0800200c 	.word	0x0800200c
 8001f5c:	08002008 	.word	0x08002008

08001f60 <_init>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f66:	bc08      	pop	{r3}
 8001f68:	469e      	mov	lr, r3
 8001f6a:	4770      	bx	lr

08001f6c <_fini>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	46c0      	nop			@ (mov r8, r8)
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr
